# import PySimpleGUI as sg
#
# # Design pattern 2 - First window remains active
#
# layout = [[ sg.Text('Window 1'),],
#           [sg.Input(do_not_clear=True)],
#           [sg.Text('', key='_OUTPUT_')],
#           [sg.Button('Launch 2'), sg.Button('Exit')]]
#
# win1 = sg.Window('Window 1').Layout(layout)
#
# win2_active = False
# while True:
#     ev1, vals1 = win1.Read(timeout=100)
#     win1.FindElement('_OUTPUT_').Update(vals1[0])
#     if ev1 is None or ev1 == 'Exit':
#         break
#
#     if not win2_active and ev1 == 'Launch 2':
#         win2_active = True
#         layout2 = [[sg.Text('Window 2')],
#                    [sg.Button('Exit')]]
#
#         win2 = sg.Window('Window 2').Layout(layout2)
#
#     if win2_active:
#         ev2, vals2 = win2.Read(timeout=100)
#         if ev2 is None or ev2 == 'Exit':
#             win2_active  = False
#             win2.Close()

# import sys
# if sys.version_info[0] >= 3:
#     import PySimpleGUI as sg
# else:
#     import PySimpleGUI27 as sg
# import pandas as pd
#
#
# def table_example():
#     sg.SetOptions(auto_size_buttons=True)
#     filename = sg.PopupGetFile('filename to open', no_window=True, file_types=(("CSV Files", "*.csv"),))
#     # --- populate table with file contents --- #
#     if filename == '':
#         sys.exit(69)
#     data = []
#     header_list = []
#     button = sg.PopupYesNo('Does this file have column names already?')
#     if filename is not None:
#         try:
#             df = pd.read_csv(filename, sep=',', engine='python', header=None)  # Header=None means you directly pass the columns names to the dataframe
#             data = df.values.tolist()               # read everything else into a list of rows
#             print(data)
#             if button == 'Yes':                     # Press if you named your columns in the csv
#                 header_list = df.iloc[0].tolist()   # Uses the first row (which should be column names) as columns names
#                 data = df[1:].values.tolist()       # Drops the first row in the table (otherwise the header names and the first row will be the same)
#             elif button == 'No':                    # Press if you didn't name the columns in the csv
#                 header_list = ['column' + str(x) for x in range(len(data[0]))]  # Creates columns names for each column ('column0', 'column1', etc)
#         except:
#             sg.PopupError('Error reading file')
#             sys.exit(69)
#
#     layout = [[sg.Table(values=data, headings=header_list, display_row_numbers=True,
#                             auto_size_columns=False, num_rows=min(25,len(data)))]]
#
#     window = sg.Window('Table', grab_anywhere=False)
#     event, values = window.Layout(layout).Read()
#
#     sys.exit(69)
#
# table_example()

import PySimpleGUI as sg

names = ['Roberta', 'Kylie', 'Jenny', 'Helen',
        'Andrea', 'Meredith','Deborah','Pauline',
        'Belinda', 'Wendy']

layout = [  [sg.Text('Listbox with search')],
            [sg.Input(do_not_clear=True, size=(20,1),enable_events=True, key='_INPUT_')],
            [sg.Listbox(names, size=(20,4), enable_events=True, key='_LIST_')],
            [sg.Button('Chrome'), sg.Button('Exit')]]

window = sg.Window('Listbox with Search').Layout(layout)
# Event Loop
while True:
    event, values = window.Read()
    if event is None or event == 'Exit':                # always check for closed window
        break
    if values['_INPUT_'] != '':                         # if a keystroke entered in search field
        search = values['_INPUT_']
        new_values = [x for x in names if search in x]  # do the filtering
        window.Element('_LIST_').Update(new_values)     # display in the listbox
    else:
        window.Element('_LIST_').Update(names)          # display original unfiltered list
    if event == '_LIST_' and len(values['_LIST_']):     # if a list item is chosen
        sg.Popup('Selected ', values['_LIST_'])

window.Close()